# .github/workflows/ci.yml

name: Full Infra + App CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_REGION:       ap-south-1
  TF_BUCKET:        my-tf-state-bucket-rex-2025
  TF_DDB_TABLE:     my-tf-lock-table-rex-2025
  APP_NAME:         jokes-app
  ECR_REPOSITORY:   jokes-app
  ECS_CLUSTER:      jokes-app-cluster
  ECS_SERVICE:      jokes-app-service
  IMAGE_TAG:        latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1) Checkout & AWS Credentials
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    # 2) Bootstrap Terraform Backend via AWS CLI
    - name: Ensure S3 State Bucket exists
      run: |
        if ! aws s3api head-bucket --bucket "$TF_BUCKET" 2>/dev/null; then
          aws s3api create-bucket \
            --bucket "$TF_BUCKET" \
            --region "$AWS_REGION" \
            --create-bucket-configuration LocationConstraint="$AWS_REGION"
          aws s3api put-bucket-versioning \
            --bucket "$TF_BUCKET" \
            --versioning-configuration Status=Enabled
        fi

    - name: Ensure DynamoDB Lock Table exists
      run: |
        if ! aws dynamodb describe-table --table-name "$TF_DDB_TABLE" 2>/dev/null; then
          aws dynamodb create-table \
            --table-name "$TF_DDB_TABLE" \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
        fi

    # 3) Install Terraform
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.7.5

    # 4) Terraform Init
    - name: Terraform Init
      working-directory: Infrastructure
      run: |
        terraform init \
          -backend-config="bucket=$TF_BUCKET" \
          -backend-config="key=${APP_NAME}/terraform.tfstate" \
          -backend-config="region=$AWS_REGION" \
          -backend-config="dynamodb_table=$TF_DDB_TABLE"

    # 5) Auto‑import existing resources into state
    - name: Auto‑import existing resources
      working-directory: Infrastructure
      run: |
        set -e

        auto_import() {
          ADDRESS=$1
          AWS_CMD="$2"
          if ! terraform state list | grep -Fxq "$ADDRESS"; then
            RESOURCE_ID=$(bash -c "$AWS_CMD" 2>/dev/null || echo "")
            if [ -n "$RESOURCE_ID" ]; then
              echo "Importing $ADDRESS => $RESOURCE_ID"
              terraform import "$ADDRESS" "$RESOURCE_ID"
            else
              echo "AWS resource for $ADDRESS not found; skipping import"
            fi
          else
            echo "$ADDRESS already in state; skipping import"
          fi
        }

        # ECR repository — import by name, not URI
        auto_import aws_ecr_repository.app_ecr_repo \
          "echo ${APP_NAME}"

        # ECS task execution role
        auto_import aws_iam_role.ecs_task_execution_role \
          "echo ${APP_NAME}-ecs-task-exec-role"

        # ALB
        auto_import aws_lb.main_alb \
          "aws elbv2 describe-load-balancers --names ${APP_NAME}-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text"

        # Target Group
        auto_import aws_lb_target_group.app_tg \
          "aws elbv2 describe-target-groups --names ${APP_NAME}-tg --query 'TargetGroups[0].TargetGroupArn' --output text"

        # CloudWatch Log Group
        auto_import aws_cloudwatch_log_group.ecs_log_group \
          "echo /ecs/${APP_NAME}"

        # IAM logging policy
        auto_import aws_iam_policy.ecs_logging_policy \
          "aws iam list-policies --scope Local --query \"Policies[?PolicyName=='ecs-logging-policy'].Arn | [0]\" --output text"

    # 6) Terraform Apply
    - name: Terraform Apply
      working-directory: Infrastructure
      run: terraform apply -auto-approve

    # 7) Log in to Amazon ECR
    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    # 8) Build, Tag & Push Docker Image
    - name: Build, Tag & Push Docker Image
      working-directory: "Web-App (Jokes Site)"
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        IMAGE_URI="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "Pushing image $IMAGE_URI"
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI

    # 9) Deploy New Image to ECS
    - name: Update ECS Service
      run: |
        aws ecs update-service \
          --cluster "$ECS_CLUSTER" \
          --service "$ECS_SERVICE" \
          --force-new-deployment
