# .github/workflows/ci.yml

name: Full Infra + App CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_REGION:       ap-south-1
  TF_BUCKET:        my-tf-state-bucket-rex-2025
  TF_DDB_TABLE:     my-tf-lock-table-rex-2025
  TF_STATE_KEY:     terraform.tfstate
  ECR_REPOSITORY:   jokes-app
  IMAGE_TAG:        latest
  ECS_CLUSTER:      jokes-cluster
  ECS_SERVICE:      jokes-service

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # ───────────────────────────────────────────────────────────────
    # 1) Checkout & AWS creds
    # ───────────────────────────────────────────────────────────────
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ env.AWS_REGION }}

    # ───────────────────────────────────────────────────────────────
    # 2) Bootstrap Terraform backend: S3 bucket + DynamoDB lock table
    # ───────────────────────────────────────────────────────────────
    - name: Ensure backend state bucket exists
      run: |
        if ! aws s3api head-bucket --bucket "$TF_BUCKET" 2>/dev/null; then
          aws s3api create-bucket \
            --bucket "$TF_BUCKET" \
            --region "$AWS_REGION" \
            --create-bucket-configuration LocationConstraint="$AWS_REGION"
          aws s3api put-bucket-versioning \
            --bucket "$TF_BUCKET" \
            --versioning-configuration Status=Enabled
          echo "✔ Created S3 bucket $TF_BUCKET"
        else
          echo "✔ S3 bucket $TF_BUCKET already exists"
        fi

    - name: Ensure DynamoDB lock table exists
      run: |
        if ! aws dynamodb describe-table --table-name "$TF_DDB_TABLE" 2>/dev/null; then
          aws dynamodb create-table \
            --table-name "$TF_DDB_TABLE" \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST
          echo "✔ Created DynamoDB table $TF_DDB_TABLE"
        else
          echo "✔ DynamoDB table $TF_DDB_TABLE already exists"
        fi

    # ───────────────────────────────────────────────────────────────
    # 3) Install & run Terraform (uses the remote backend you just bootstrapped)
    # ───────────────────────────────────────────────────────────────
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.7.5

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=$TF_BUCKET" \
          -backend-config="key=$TF_STATE_KEY" \
          -backend-config="region=$AWS_REGION" \
          -backend-config="dynamodb_table=$TF_DDB_TABLE"

    - name: Terraform Apply
      run: terraform apply -auto-approve

    # ───────────────────────────────────────────────────────────────
    # 4) Build & push Docker image to ECR
    # ───────────────────────────────────────────────────────────────
    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, Tag & Push Docker Image
      run: |
        IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${IMAGE_TAG}"
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
        cd "Web-App (Jokes Site)"
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI

    # ───────────────────────────────────────────────────────────────
    # 5) Deploy new image via ECS
    # ───────────────────────────────────────────────────────────────
    - name: Update ECS Service
      run: |
        aws ecs update-service \
          --cluster "$ECS_CLUSTER" \
          --service "$ECS_SERVICE" \
          --force-new-deployment
